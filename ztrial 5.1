# -*- coding: utf-8 -*-
import re
import datetime
import random
import pandas as pd
import streamlit as st

# Simulated fine-tuned BERT model output
def simulate_bert_scores(message):
    urgency_score = random.uniform(0.3, 1.0)
    importance_score = random.uniform(0.3, 1.0)
    return urgency_score, importance_score

# Rule-based urgency score based on deadline proximity
def rule_based_urgency(message, timestamp):
    deadline_match = re.search(r'\b(\d{4}-\d{2}-\d{2})\b', message)
    if deadline_match:
        try:
            deadline = datetime.datetime.strptime(deadline_match.group(1), "%Y-%m-%d")
            days_diff = (deadline - timestamp).days
            if days_diff < 0:
                return 0.0
            elif days_diff <= 1:
                return 1.0
            elif days_diff <= 3:
                return 0.75
            elif days_diff <= 7:
                return 0.5
            else:
                return 0.25
        except:
            return 0.0
    return 0.0

# Rule-based flags for urgency keywords
def rule_based_flags(message):
    keywords = ['urgent', 'asap', 'immediately', 'critical', 'important']
    score = 0.0
    for word in keywords:
        if re.search(rf'\b{word}\b', message, re.IGNORECASE):
            score += 0.1
    return min(score, 0.3)

# Combine rule-based and BERT scores
def combine_scores(urgency_rule_score, urgency_flag_score, urgency_bert_score, importance_bert_score, weight_rule=0.4, weight_bert=0.6):
    rule_total = urgency_rule_score + urgency_flag_score
    combined_urgency = weight_rule * rule_total + weight_bert * urgency_bert_score
    combined_urgency = min(combined_urgency, 1.0)
    combined_importance = importance_bert_score
    return combined_urgency, combined_importance

# Generate response and escalation decision
def analyze_message(message, timestamp):
    urgency_rule_score = rule_based_urgency(message, timestamp)
    urgency_flag_score = rule_based_flags(message)
    urgency_bert_score, importance_bert_score = simulate_bert_scores(message)
    final_urgency, final_importance = combine_scores(
        urgency_rule_score, urgency_flag_score, urgency_bert_score, importance_bert_score
    )
    escalate = final_urgency > 0.7 and final_importance > 0.7
    response = generate_response(message, final_urgency, final_importance, escalate)
    return {
        "timestamp": timestamp,
        "message": message,
        "urgency": round(final_urgency, 2),
        "importance": round(final_importance, 2),
        "response": response,
        "escalate": escalate
    }

def generate_response(message, urgency, importance, escalate):
    if escalate:
        return "üö® This message appears to be both urgent and important. Recommended action: escalate to your project lead or take immediate steps to address the issue."
    elif urgency > 0.5 or importance > 0.5:
        return "‚ö†Ô∏è This message has moderate urgency or importance. You may want to review it soon and follow up if needed."
    else:
        return "‚úÖ This message does not require immediate attention. You can monitor it for now."

# Streamlit App
st.set_page_config(page_title="Message Analyzer", layout="wide")

# Initialize session state
if "message_history" not in st.session_state:
    st.session_state.message_history = []
if "escalated_tasks" not in st.session_state:
    st.session_state.escalated_tasks = []

tab1, tab2 = st.tabs(["Analyze Message", "Escalated Tasks Dashboard"])

with tab1:
    st.header("Analyze a Message")
    message_input = st.text_area("Enter your message or email text:")
    timestamp_input = st.date_input("Message timestamp", datetime.date.today())
    analyze_button = st.button("Analyze")

    if analyze_button and message_input:
        timestamp = datetime.datetime.combine(timestamp_input, datetime.datetime.min.time())
        result = analyze_message(message_input, timestamp)
        st.markdown(f"**Response:** {result['response']}")
        st.session_state.message_history.append(result)

        if result["escalate"]:
            st.success("‚úÖ Task added to dashboard.")
            st.session_state.escalated_tasks.append({
                "timestamp": result["timestamp"],
                "message": result["message"],
                "urgency": result["urgency"],
                "importance": result["importance"],
                "response": result["response"],
                "project_name": "",
                "action": "",
                "deadline": "",
                "status": "Pending"
            })

with tab2:
    st.header("Escalated Tasks Dashboard")
    if st.session_state.escalated_tasks:
        df = pd.DataFrame(st.session_state.escalated_tasks)
        editable_cols = ["project_name", "action", "deadline", "status"]
        df = st.data_editor(df, num_rows="dynamic", use_container_width=True, key="dashboard_editor")
        sort_by = st.selectbox("Sort by", ["timestamp", "deadline", "status"])
        df = df.sort_values(by=sort_by)
        st.dataframe(df)
    else:
        st.info("No escalated tasks yet.")
