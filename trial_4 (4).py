# -*- coding: utf-8 -*-
"""Trial 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wh2zp--L5MDRbrdMIy3_FhfJTW8V3efe
"""

# imports and setup

import re
import datetime
import random
import pandas as pd
import dateparser
import streamlit as st
import os
import uuid
from dateparser.search import search_dates

WEEKDAY_CORRECTIONS = {
    # Abbreviations
    "mon": "monday",
    "tue": "tuesday", "tues": "tuesday",
    "wed": "wednesday", "weds": "wednesday",
    "thu": "thursday", "thur": "thursday", "thurs": "thursday",
    "fri": "friday", "friyay": "friday",
    "sat": "saturday",
    "sun": "sunday",

    # Common misspellings
    "wensday": "wednesday",
    "thirsday": "thursday",
    "fryday": "friday",
    "saterday": "saturday",
    "sundy": "sunday",
    "mondy": "monday",
    "tusday": "tuesday",
    "wednsday": "wednesday"
}

def correct_weekdays(text):
    for wrong, right in WEEKDAY_CORRECTIONS.items():
        text = re.sub(rf"\b{wrong}\b", right, text, flags=re.IGNORECASE)
    return text

def extract_deadline_from_message(message, reference_date):
    corrected_message = correct_weekdays(message)

    # Step 1: Handle "next [weekday]"
    weekday_match = re.search(r'\bnext\s+(monday|tuesday|wednesday|thursday|friday|saturday|sunday)\b', corrected_message, re.IGNORECASE)
    if weekday_match:
        weekday_str = weekday_match.group(1).lower()
        weekday_index = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].index(weekday_str)
        days_ahead = (weekday_index - reference_date.weekday() + 7) % 7
        days_ahead = days_ahead + 7 if days_ahead == 0 else days_ahead + 7
        return reference_date + datetime.timedelta(days=days_ahead)

    # Step 2: Handle "next week"
    if re.search(r'\bnext\s+week\b', corrected_message, re.IGNORECASE):
        days_until_next_monday = (7 - reference_date.weekday()) % 7 + 7
        return reference_date + datetime.timedelta(days=days_until_next_monday)

    # Step 3: Handle "next month"
    if re.search(r'\bnext\s+month\b', corrected_message, re.IGNORECASE):
        year = reference_date.year
        month = reference_date.month + 1
        if month > 12:
            month = 1
            year += 1
        return datetime.datetime(year, month, 1)

    # Step 4: Manually extract DD/MM or DD/MM/YY patterns
    date_match = re.search(r'\b(\d{1,2})/-(?:/-)?\b', corrected_message)
    if date_match:
        day, month, year = date_match.groups()
        day = int(day)
        month = int(month)
        if year:
            year = int(year)
            if year < 100:
                year += 2000
        else:
            year = reference_date.year

        try:
            parsed_date = datetime.datetime(year, month, day)
            if parsed_date < reference_date:
                parsed_date = parsed_date.replace(year=year + 1)
            return parsed_date
        except ValueError:
            pass

    # Step 5: Fallback to search_dates
    results = search_dates(
        corrected_message,
        settings={
            'RELATIVE_BASE': reference_date,
            'PREFER_DATES_FROM': 'future',
            'DATE_ORDER': 'DMY',
            'STRICT_PARSING': False
        }
    )

    if results:
        for phrase, parsed_date in results:
            if parsed_date:
                parsed_date = correct_year_if_needed(parsed_date, reference_date)
                return parsed_date

    return None

    '''
    # Match various date formats and relative phrases
    deadline_phrases = re.findall(
        r'\b(?:by|for|on|due)?\s*('
        r'\d{1,2}[/-]\d{1,2}(?:[/-]\d{2,4})?|'             # 08/07 or 08/07/2025
        r'\d{4}-\d{2}-\d{2}|'                              # 2025-07-08
        r'\d{1,2}(?:st|nd|rd|th)?\s+of\s+\w+|'             # 8th of July
        r'\d{1,2}(?:st|nd|rd|th)?\s+\w+|'                  # 8th July
        r'\w+\s+\d{1,2}(?:st|nd|rd|th)?|'                  # July 8th
        r'\w+\s+\d{1,2},?\s*\d{4}|'                        # July 8, 2025
        r'(?:next\s+(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday))|'
        r'(?:this\s+(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday))|'
        r'tomorrow|today|'
        r'monday|tuesday|wednesday|thursday|friday|saturday|sunday'
        r')\b',
        corrected_message,
        re.IGNORECASE
    )

    # Try parsing each matched phrase
    for phrase in deadline_phrases:
        if re.match(r'^\d{1,2}[/-]\d{1,2}$', phrase):
            phrase += f'/{current_year}'

        parsed = dateparser.parse(
            phrase,
            settings={
                'RELATIVE_BASE': reference_date,
                'PREFER_DATES_FROM': 'future',
                'DATE_ORDER': 'DMY',
                'STRICT_PARSING': False
            }
        )
        if parsed:
            return parsed

    # Fallback: explicitly search for "next/this + weekday" if not caught above
    fallback_phrases = re.findall(
        r'\b(next|this)\s+(monday|tuesday|wednesday|thursday|friday|saturday|sunday)\b',
        corrected_message,
        re.IGNORECASE
    )
    for modifier, weekday in fallback_phrases:
        phrase = f"{modifier} {weekday}"
        parsed = dateparser.parse(
            phrase,
            settings={
                'RELATIVE_BASE': reference_date,
                'PREFER_DATES_FROM': 'future'
            }
        )
        if parsed:
            return parsed

    return None
    '''

# Simulated fine-tuned BERT model output
def simulate_llm_scores(message):
    urgency_score = random.uniform(0.3, 1.0)
    importance_score = random.uniform(0.3, 1.0)
    return urgency_score, importance_score

# Rule-based urgency score based on deadline proximity
def rule_based_urgency(message_date, deadline=None):
    if deadline:
        days_diff = (deadline - message_date).days
        if days_diff < 0:
            return 0.0
        elif days_diff <= 1:
            return 1.0
        elif days_diff <= 3:
            return 0.85
        elif days_diff <= 7:
            return 0.5
        else:
            return 0.25
    return 0.0

# Rule-based keyword flags for urgency
def rule_based_flags(message):
    keywords = ['urgent', 'asap', 'immediately', 'critical', 'important']
    score = 0.0
    for word in keywords:
        if re.search(rf'\b{word}\b', message, re.IGNORECASE):
            score += 0.3
    return min(score, 1.0)

# Combine rule-based and LLM scores
def combine_scores(
    urgency_rule_score,
    urgency_flag_score,
    urgency_llm_score,
    importance_llm_score,
    weight_rule=0.4,
    weight_llm=0.6
):
    rule_total = min(urgency_rule_score + urgency_flag_score, 1.0)
    total_weight = weight_rule + weight_llm
    normalized_rule_weight = weight_rule / total_weight
    normalized_llm_weight = weight_llm / total_weight

    combined_urgency = normalized_rule_weight * rule_total + normalized_llm_weight * urgency_llm_score
    return min(combined_urgency, 1.0), importance_llm_score

# Generate natural language response
def generate_response(urgency, importance, escalate):
    if escalate:
        return "🚨 This message appears to be both urgent and important. Recommended action: escalate to your project lead or take immediate steps to address the issue."
    elif urgency > 0.5 or importance > 0.5:
        return "⚠️ This message has moderate urgency or importance. You may want to review it soon and follow up if needed."
    else:
        return "✅ This message does not require immediate attention. You can monitor it for now."

# Analyze a message and return structured result
def analyze_message(message, message_date):
    deadline = extract_deadline_from_message(message, message_date)
    urgency_rule_score = rule_based_urgency(message_date, deadline)
    urgency_flag_score = rule_based_flags(message)
    urgency_llm_score, importance_llm_score = simulate_llm_scores(message)

    final_urgency, final_importance = combine_scores(
        urgency_rule_score,
        urgency_flag_score,
        urgency_llm_score,
        importance_llm_score
    )

    escalate = final_urgency > 0.7 and final_importance > 0.7
    response = generate_response(final_urgency, final_importance, escalate)

    return {
        "id": str(uuid.uuid4()),
        "date_sent": message_date,
        "message": message,
        "deadline": deadline,
        "project": "",  # To be edited by user later
        "action": "",
        "status": "Not Started",
        "escalate": escalate,
        "response": response
    }

# Add a banner and title
st.markdown("""
    <div style="background-color:#003366;padding:10px;border-radius:5px">
        <h1 style="color:white;text-align:center;">📬 Cognizant Message Analyzer</h1>
    </div>
""", unsafe_allow_html=True)

# Create tabs with clearer names
tab1, tab2 = st.tabs(["📊 Urgency Calculator", "📋 Dashboard"])



with tab1:
    st.header("📊 Urgency Calculator")

    # Message input
    full_message_input = st.text_area("Paste the full message including any deadlines:")

    # Date input
    message_date_input = st.date_input("Date the message was sent", datetime.date.today(), format="DD/MM/YYYY")

    # Project name input (re-added)
    project_name_input = st.text_input("Enter project name:")

    # Analyze button
    analyze_button = st.button("Analyze")

    if analyze_button and full_message_input:
        message_date = datetime.datetime.combine(message_date_input, datetime.datetime.min.time())
        result = analyze_message(full_message_input, message_date)

        # Add project name if provided
        if project_name_input:
            result["project"] = project_name_input.strip()

        # Display response
        st.markdown(f"**Response:** {result['response']}")

        # Initialize session state if needed
        if "escalated_tasks" not in st.session_state:
            st.session_state.escalated_tasks = []

        if "deleted_ids" not in st.session_state:
            st.session_state.deleted_ids = set()

        # Only add if escalated and not previously deleted
        if result["escalate"] and result["id"] not in st.session_state.deleted_ids:
            st.success("✅ Task added to dashboard.")
            st.session_state.escalated_tasks.append(result)

with tab2:
    st.header("📋 Escalated Tasks Dashboard")

    if "escalated_tasks" not in st.session_state:
        st.session_state.escalated_tasks = []

    if "deleted_ids" not in st.session_state:
        st.session_state.deleted_ids = set()

    visible_tasks = [
        task for task in st.session_state.escalated_tasks
        if task["id"] not in st.session_state.deleted_ids
    ]

    if not visible_tasks:
        st.info("No escalated tasks yet.")
    else:
        df = pd.DataFrame(visible_tasks)

        # Format and rename columns
        df["Date of Message"] = pd.to_datetime(df["date_sent"], errors="coerce").dt.strftime("%d/%m/%Y")
        df["Deadline"] = pd.to_datetime(df["deadline"], errors="coerce").dt.strftime("%d/%m/%Y")

        def status_emoji(status):
            return {
                "Not Started": "🔴 Not Started",
                "In Progress": "🟡 In Progress",
                "Completed": "🟢 Completed"
            }.get(status, status)

        df["Status"] = df["status"].apply(status_emoji)
        df["Project"] = df["project"]
        df["Action"] = df["action"]
        df["Message"] = df["message"]
        df["Select"] = False  # Checkbox for deletion

        # Filter by project name (case-insensitive using uppercase)
        project_options_raw = df["Project"].dropna().unique().tolist()
        project_options_display = sorted(set([p.upper() for p in project_options_raw]))
        selected_projects = st.multiselect("🔍 Filter by project(s):", options=project_options_display)

        if selected_projects:
            df = df[df["Project"].str.upper().isin(selected_projects)]

        # Create display DataFrame (hide internal ID)
        df_display = df[["Date of Message", "Message", "Project", "Action", "Deadline", "Status", "Select"]].copy()
        id_map = df["id"].tolist()  # Keep ID separately for logic

        # Editable table
        edited_df = st.data_editor(
            df_display,
            use_container_width=True,
            column_config={
                "Status": st.column_config.SelectboxColumn("Status", options=["🔴 Not Started", "🟡 In Progress", "🟢 Completed"]),
                "Project": st.column_config.TextColumn("Project"),
                "Action": st.column_config.TextColumn("Action"),
                "Select": st.column_config.CheckboxColumn("Select")
            },
            disabled=["Date of Message", "Deadline", "Message"],
            hide_index=True,
            key="dashboard_editor"
        )

        # Update session state with edits
        for i, row in edited_df.iterrows():
            task_id = id_map[i]
            for task in st.session_state.escalated_tasks:
                if task["id"] == task_id:
                    task["status"] = row["Status"].split(" ", 1)[-1]
                    task["project"] = row["Project"]
                    task["action"] = row["Action"]

        # Delete selected rows when button is clicked
        if st.button("🗑️ Delete Selected"):
            selected_ids = [id_map[i] for i, row in edited_df.iterrows() if row["Select"]]
            st.session_state.deleted_ids.update(selected_ids)

            st.session_state.escalated_tasks = [
                task for task in st.session_state.escalated_tasks
                if task["id"] not in st.session_state.deleted_ids
            ]
            st.rerun()


